1a.

50
  20
    10
      xx
      15
    40
      30
        26
        35
      xx
  60
    xx
    70
      68
      80
        75
        xx


1b.

inorder: 10 15 20 26 30 35 40 50 60 68 70 75 80

preorder: 50 20 10 15 40 30 26 35 60 70 68 80 75

postorder: 15 10 26 35 30 40 20 68 75 80 70 60 50


1c.

50
  26
    10
      xx
      15
    40
      35
      xx
  60
    xx
    70
      68
      80
        75
        xx

2a. 

class BinarySearchTree 
{
    public:
        ...
    private:
        struct Node
        {
            Node* parent = nullptr;
            Node* left = nullptr;
            Node* right = nullptr;
            int data;
        };
};

2b.

insertNode (subTreePtr: NodePtr, newNodePtr: NodePtr): NodePtr
{
    if (newNodePtr->data == subTreePtr->data)
    {
        if (subTreePtr is nullptr)
        {
            newNodePtr->parent = subTreePtr->parent
            subTreePtr = newNodePtr;
            return newNodePtr;
        }
        else if (newNodePtr->data < subTreePtr->data)
        {
            tempPtr = insertNode(subTreePtr->left, newNodePtr)
            subTreePtr->left = tempPtr
        }
        else if (newNodePtr->data > subTreePtr->data)
        {
            tempPtr = insertNode(subTreePtr->right, newNodePtr)
            subTreePtr->right = tempPtr
        }

        return subTreePtr
    }
    
    return nullptr
}

3a. 

7
  5
    1
    0
  6
    3
    xx


3b.

[7, 5, 6, 1, 0, 3]

3c.

6
  5
    1
    0
  3

[6, 5, 3, 1, 0]


4a. O(C + S)
4b. O(log C + S)
4c. O(log C + log S)
4d. O(log S)
4e. O(1)
4f. O(log C + S)
4g. O(S log S)
4h. O(C log S)